/**
 * Simple desugarings of SQL:
 * - duplicate row elimination specification
 * - ...
 */
module sql-desugar
imports
  SQL
  libstrategolib

strategies

  main-sql-desugar =
    io-wrap(topdown(sql-desugar))

  sql-desugar = 
    topdown(try(SQL-Desugar))

  SQL-Desugar =
    SQL-Desugar-Duplicate

rules

  /**
   * Desugar optional specification of duplicate row elimination. 
   *
   * SELECT: If neither ALL nor DISTINCT is specified, ALL is assumed.
   * UNION/EXCEPT/INTERSECT: If ALL is not specified, DISTINCT is assumed.
   */
  SQL-Desugar-Duplicate :
    SelectExp(None, ps, froms, cond, groupby, having)
      ->
    SelectExp(Some(All), ps, froms, cond, groupby, having)

  /**
   * Duplication elimination. 
   * If neither ALL nor DISTINCT is specified, ALL is assumed.
   */
  SQL-Desugar-Duplicate :
    Union(t1, None(), t2) -> Union(t1, Some(Distinct()), t2)

  SQL-Desugar-Duplicate :
    Except(t1, None(), t2) -> Except(t1, Some(Distinct()), t2)

  SQL-Desugar-Duplicate :
    Intersect(t1, None(), t2) -> Intersect(t1, Some(Distinct()), t2)

rules

  SQL-Desugar :
    NaturalJoin(t1, None(), t2) -> NaturalJoin(t1, Some(Inner()), t2)

  SQL-Desugar :
    JoinOn(t1, None(), t2, c) -> JoinOn(t1, Some(Inner()), t2, c)

  SQL-Desugar :
    JoinUsing(t1, None(), t2, cols) -> JoinUsing(t1, Some(Inner()), t2, cols)

  SQL-Desugar :
    In(r, t) -> AnyComp(r, EqOp(), t)

rules

  SQL-Desugar :
    SomeComp(row, op, table-exp) -> AnyComp(row, op, table-exp)

  SQL-Desugar :
    NotIn(row, table-exp) -> AnyComp(row, LtGtOp(), table-exp)
