module languages/sql92/expressions/Table
imports
  languages/sql92/Misc
  languages/sql92/lexical/Identifier
  languages/sql92/expressions/Conditional
  languages/sql92/expressions/Value


exports
  sorts TableExp RowConstructor
  context-free syntax

    JoinTableExp -> TableRef

    Table (OptionalAs RangeVar ( "(" {Column ","}+ ")")? )?
      -> TableRef {cons("TableRef")}

    "(" TableExp ")" OptionalAs RangeVar ( "(" {Column ","}+ ")" )?
      -> TableRef {cons("TableRef")}

    JoinTableExp -> TableExp

    TableExp "UNION"     DupElim? TableExp -> TableExp {cons("Union")}
    TableExp "EXCEPT"    DupElim? TableExp -> TableExp {cons("Except")}
    TableExp "INTERSECT" DupElim? TableExp -> TableExp {cons("Intersect")}

    "(" TableExp ")" -> TableExp {bracket}

    TableRef "CROSS JOIN"                TableRef       -> JoinTableExp {cons("CrossJoin")}
    TableRef "NATURAL" JoinType? "JOIN"  TableRef       -> JoinTableExp {cons("NaturalJoin")}

    TableRef  JoinType? "JOIN"  TableRef "ON" CondExp -> JoinTableExp {cons("JoinOn")}
    TableRef  JoinType? "JOIN"  TableRef "USING" "(" {Column ","}+ ")" -> JoinTableExp {cons("JoinUsing")}

    "INNER"       -> JoinType {cons("Inner")}
    "LEFT OUTER"  -> JoinType {cons("Left")}
    "RIGHT OUTER" -> JoinType {cons("Right")}
    "FULL OUTER"  -> JoinType {cons("Full")}
    "UNION"       -> JoinType {cons("Union")}

    ValExp -> RowConstructor

    "SELECT" DupElim? {SelectItem ","}+
      "FROM" {TableRef ","}+
        ("WHERE" CondExp)?
          ("GROUP BY" {ColumnRef ","}+ )?
            ( "HAVING" CondExp)?
      -> TableExp {cons("SelectExp")}
 
    ValExp (OptionalAs Column)? -> SelectItem {cons("ColumnProject")}
    (RangeVar ".")? "*" -> SelectItem {cons("WildcardProject")}

    %% Ugh, these should not be visible in the AST at all.
    "AS" -> OptionalAs {cons("As")}
         -> OptionalAs {cons("NoAs")}
