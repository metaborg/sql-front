module expressions/Table
imports
  Misc
  lexical/Identifier
  expressions/Conditional
  expressions/Value

exports
  sorts QueryExpr TableExpr RowConstructor
  context-free syntax
    %%JoinTableExpr     -> QueryExpr
    "(" QueryExpr ")" -> QueryExpr {bracket}

    QueryExpr "UNION"       QueryExpr -> QueryExpr {cons("Union")}
    QueryExpr "union"       QueryExpr -> QueryExpr {cons("Union")}
    QueryExpr "UNION" "ALL" QueryExpr -> QueryExpr {cons("UnionAll")}
    QueryExpr "union" "all" QueryExpr -> QueryExpr {cons("UnionAll")}

  %%%
   %% Query specification
   %%%  
  context-free syntax
    "SELECT" SetQuantifier?
      StraightJoinClause?
      ResultSizePrediction?
      {SelectItem ","}+
	    FromClause
	    WhereClause? 
	    GroupByClause? 
	    HavingClause? 
	    OrderByClause?
	    SelectLimitClause? -> QueryExpr {cons("Select")}
    "select" SetQuantifier?      StraightJoinClause?      ResultSizePrediction?      {SelectItem ","}+	    FromClause	    WhereClause?	    GroupByClause?	    HavingClause?	    OrderByClause?	    SelectLimitClause? -> QueryExpr {cons("Select")}
	
    "STRAIGHT_JOIN" -> StraightJoinClause {cons("StraightJoin")}
    "straight_join" -> StraightJoinClause {cons("StraightJoin")}
    
    "SQL_SMALL_RESULT" -> ResultSizePrediction {cons("SqlSmallResult")}
    "sql_small_result" -> ResultSizePrediction {cons("SqlSmallResult")}
    "SQL_BIG_RESULT"   -> ResultSizePrediction {cons("SqlBigResult")}
    "sql_big_result"   -> ResultSizePrediction {cons("SqlBigResult")}
    
    ValExpr ColumnAs?   -> SelectItem {cons("ColumnProject")}
    RangeVarDot? "*" -> SelectItem {cons("WildcardProject")}
    
    RangeVar "." -> RangeVarDot {cons("RangeVarDot")}
    
    
    
    "AS" ColumnName -> ColumnAs {cons("As")}
    "as" ColumnName -> ColumnAs {cons("As")}
         ColumnName -> ColumnAs {cons("As")}

  %%%
   %% Table expression
   %%%
  context-free syntax
    "FROM" {TableRef ","}+ -> FromClause {cons("From")}
    "from" {TableRef ","}+ -> FromClause {cons("From")}

    ColumnRef               -> GroupingColumnRef
    
    "WHERE" CondExpr                              -> WhereClause   {cons("Where")}
    "where" CondExpr                              -> WhereClause   {cons("Where")}
    "GROUP" "BY" {SortSpec ","}+ WithRollupClause?  -> GroupByClause {cons("GroupBy")}
    "group" "by" {SortSpec ","}+ WithRollupClause?  -> GroupByClause {cons("GroupBy")}
    "HAVING" CondExpr                             -> HavingClause  {cons("Having")}
    "having" CondExpr                             -> HavingClause  {cons("Having")}
    "LIMIT" UnsignedInteger                       -> LimitClause   {cons("Limit")}
    "limit" UnsignedInteger                       -> LimitClause   {cons("Limit")}
    
    LimitClause                                      -> SelectLimitClause
    "LIMIT" UnsignedInteger "OFFSET" UnsignedInteger -> SelectLimitClause {cons("LimitOffset")}
    "limit" UnsignedInteger "offset" UnsignedInteger -> SelectLimitClause {cons("LimitOffset")}
    "LIMIT" UnsignedInteger "," UnsignedInteger      -> SelectLimitClause {cons("Limit")}
    "limit" UnsignedInteger "," UnsignedInteger      -> SelectLimitClause {cons("Limit")}
    
    "WITH" "ROLLUP" -> WithRollupClause {cons("WithRollup")}
    "with" "rollup" -> WithRollupClause {cons("WithRollup")}
    
  context-free syntax
    "ORDER" "BY" {SortSpec ","}+ -> OrderByClause {cons("OrderBy")}
    "order" "by" {SortSpec ","}+ -> OrderByClause {cons("OrderBy")}
    
    SortKey OrderingSpec? -> SortSpec {cons("SortSpec")}
    
    ColumnRef       -> SortKey
    UnsignedInteger -> SortKey
    
    "ASC"  -> OrderingSpec {cons("Ascending")}
    "asc"  -> OrderingSpec {cons("Ascending")}
    "DESC" -> OrderingSpec {cons("Descending")}
    "desc" -> OrderingSpec {cons("Descending")}

  %%%
   %% Table references
   %%%
  context-free syntax
    Table    TableAs? -> TableRef {cons("TableRef")}
    SubQuery TableAs  -> TableRef {cons("TableRef")}
    JoinTableExpr     -> TableRef
    
    "(" QueryExpr ")" -> SubQuery {cons("SubQuery")}
    
    "AS" RangeVar -> TableAs {cons("As")}
    "as" RangeVar -> TableAs {cons("As")}
         RangeVar -> TableAs {cons("As")}

	%% "(" {ColumnName ","}+ ")" -> AliasCols {cons("AliasCols"), bracket}

  %%%
   %% Joined tables
   %%%
  context-free syntax
    TableRef "JOIN"                     TableRef JoinSpec?     -> JoinTableExpr {cons("Join")}
    TableRef "join"                     TableRef JoinSpec?     -> JoinTableExpr {cons("Join")}
    TableRef "CROSS" "JOIN"             TableRef JoinSpec?     -> JoinTableExpr {cons("CrossJoin")}
    TableRef "cross" "join"             TableRef JoinSpec?     -> JoinTableExpr {cons("CrossJoin")}
    TableRef "INNER" "JOIN"             TableRef JoinSpec?     -> JoinTableExpr {cons("InnerJoin")}
    TableRef "inner" "join"             TableRef JoinSpec?     -> JoinTableExpr {cons("InnerJoin")}
    TableRef "STRAIGHT_JOIN"            TableRef               -> JoinTableExpr {cons("StraightJoin")}
    TableRef "straight_join"            TableRef               -> JoinTableExpr {cons("StraightJoin")}
    TableRef "STRAIGHT_JOIN"            TableRef "ON" CondExpr -> JoinTableExpr {cons("StraightJoinOn")}
    TableRef "straight_join"            TableRef "on" CondExpr -> JoinTableExpr {cons("StraightJoinOn")}
    TableRef           JoinType  "JOIN" TableRef JoinSpec      -> JoinTableExpr {cons("Join")}
    TableRef           JoinType  "join" TableRef JoinSpec      -> JoinTableExpr {cons("Join")}
    TableRef "NATURAL" JoinType? "JOIN" TableRef               -> JoinTableExpr {cons("NaturalJoin")}
    TableRef "natural" JoinType? "join" TableRef               -> JoinTableExpr {cons("NaturalJoin")}
    
    "ON" CondExpr                     -> JoinSpec {cons("On")}
    "on" CondExpr                     -> JoinSpec {cons("On")}
    "USING" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}
    "using" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}
    
    "LEFT"          -> JoinType {cons("Left")}
    "left"          -> JoinType {cons("Left")}
    "RIGHT"         -> JoinType {cons("Right")}
    "right"         -> JoinType {cons("Right")}
    "LEFT" "OUTER"  -> JoinType {cons("LeftOuter")}
    "left" "outer"  -> JoinType {cons("LeftOuter")}
    "RIGHT" "OUTER" -> JoinType {cons("RightOuter")}
    "right" "outer" -> JoinType {cons("RightOuter")}


