module expressions/Table
imports
  Misc
  lexical/Identifier
  expressions/Conditional
  expressions/Value

exports
  sorts QueryExpr TableExpr RowConstructor
  context-free syntax
    JoinTableExpr     -> QueryExpr
    "(" QueryExpr ")" -> QueryExpr {bracket}

    QueryExpr "UNION"     All? Corresponding? QueryExpr -> QueryExpr {cons("Union")}
    QueryExpr "EXCEPT"    All? Corresponding? QueryExpr -> QueryExpr {cons("Except")}
    QueryExpr "INTERSECT" All? Corresponding? QueryExpr -> QueryExpr {cons("Intersect")}
    "ALL" -> All {cons("All")} 
    "CORRESPONDING" ByClause?      -> Corresponding {cons("Corresponding")}
    "BY" "(" {ColumnName ","}+ ")" -> ByClause      {cons("By")}

    "VALUES" {RowConstructor ","}+  -> QueryExpr {cons("Values")}
    "TABLE" TableName               -> QueryExpr {cons("Table")}

  %%%
   %% Query specification
   %%%  
  context-free syntax
    "SELECT" SetQuantifier? {SelectItem ","}+ TableExpr -> QueryExpr {cons("Select")}


    ValExpr (As? ColumnName)? -> SelectItem {cons("ColumnProject")}
    (RangeVar ".")? "*"     -> SelectItem {cons("WildcardProject")}

    %% Ugh, these should not be visible in the AST at all.
    "AS" -> As {cons("As")}

  %%%
   %% Table expression
   %%%
  context-free syntax
    "FROM" {TableRef ","}+ WhereClause? GroupByClause? HavingClause? -> TableExpr {cons("From")}

    ColumnRef               -> GroupingColumnRef
    ColumnRef CollateClause -> GroupingColumnRef {cons("Collate")}
    
    "WHERE" CondExpr                     -> WhereClause   {cons("Where")}
    "GROUP BY" {GroupingColumnRef ","}+  -> GroupByClause {cons("GroupBy")}
    "HAVING" CondExpr                    -> HavingClause  {cons("Having")}

  %%%
   %% Table references
   %%%
  context-free syntax
    Table (As? RangeVar ( "(" {ColumnName ","}+ ")")? )?          -> TableRef {cons("TableRef")}
    "(" QueryExpr ")" As? RangeVar ( "(" {ColumnName ","}+ ")" )? -> TableRef {cons("TableRef")}
    JoinTableExpr -> TableRef


  %%%
   %% Joined tables
   %%%
  context-free syntax
    TableRef "CROSS JOIN"                TableRef       -> JoinTableExpr {cons("CrossJoin")}
    TableRef "NATURAL" JoinType? "JOIN"  TableRef       -> JoinTableExpr {cons("NaturalJoin")}

    TableRef  JoinType? "JOIN" TableRef JoinSpec -> JoinTableExpr {cons("Join")}

    "ON" CondExpr                     -> JoinSpec {cons("On")}
    "USING" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}


    "INNER"       -> JoinType {cons("Inner")}
    "LEFT OUTER"  -> JoinType {cons("Left")}
    "RIGHT OUTER" -> JoinType {cons("Right")}
    "FULL OUTER"  -> JoinType {cons("Full")}
    "UNION"       -> JoinType {cons("Union")}


