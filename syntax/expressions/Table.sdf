module expressions/Table
imports
  Misc
  lexical/Identifier
  expressions/Conditional
  expressions/Value

exports
  sorts QueryExpr TableExpr RowConstructor
  context-free syntax
    JoinTableExpr     -> QueryExpr
    "(" QueryExpr ")" -> QueryExpr {bracket}

    QueryExpr "UNION"       QueryExpr -> QueryExpr {cons("Union")}
    QueryExpr "UNION" "ALL" QueryExpr -> QueryExpr {cons("UnionAll")}

  %%%
   %% Query specification
   %%%  
  context-free syntax
    "SELECT" SetQuantifier? {SelectItem ","}+
	    FromClause 
	    GroupByClause? 
	    HavingClause? 
	    OrderByClause?
	    LimitClause? -> QueryExpr {cons("Select")}
	

    ValExpr ColumnAs?   -> SelectItem {cons("ColumnProject")}
    (RangeVar ".")? "*" -> SelectItem {cons("WildcardProject")}
    
    "AS" ColumnName -> ColumnAs {cons("As")}
         ColumnName -> ColumnAs {cons("As")}

  %%%
   %% Table expression
   %%%
  context-free syntax
    "FROM" {TableRef ","}+ -> FromClause {cons("From")}

    ColumnRef               -> GroupingColumnRef
    
    "WHERE" CondExpr                     -> WhereClause   {cons("Where")}
    "GROUP BY" {GroupingColumnRef ","}+  -> GroupByClause {cons("GroupBy")}
    "HAVING" CondExpr                    -> HavingClause  {cons("Having")}
    "LIMIT" UnsignedInteger              -> LimitClause   {cons("Limit")}
    
  context-free syntax
    "ORDER" "BY" {SortSpec ","}+ -> OrderByClause {cons("OrderBy")}
    
    SortKey OrderingSpec? -> SortSpec {cons("SortSpec")}
    
    ColumnName      -> SortKey
    UnsignedInteger -> SortKey
    
    "ASC"  -> OrderingSpec {cons("Ascending")}
    "DESC" -> OrderingSpec {cons("Descending")}

  %%%
   %% Table references
   %%%
  context-free syntax
    Table             TableAs? -> TableRef {cons("TableRef")}
    "(" QueryExpr ")" TableAs  -> TableRef {cons("TableRef")}
    JoinTableExpr              -> TableRef
    
    "AS" RangeVar -> TableAs {cons("As")}
         RangeVar -> TableAs {cons("As")}

	%% "(" {ColumnName ","}+ ")" -> AliasCols {cons("AliasCols"), bracket}

  %%%
   %% Joined tables
   %%%
  context-free syntax
    TableRef "CROSS JOIN"                TableRef       -> JoinTableExpr {cons("CrossJoin")}
    TableRef "NATURAL" JoinType? "JOIN"  TableRef       -> JoinTableExpr {cons("NaturalJoin")}

    TableRef  JoinType? "JOIN" TableRef JoinSpec -> JoinTableExpr {cons("Join")}

    "ON" CondExpr                     -> JoinSpec {cons("On")}
    "USING" "(" {ColumnName ","}+ ")" -> JoinSpec {cons("Using")}


    "INNER"       -> JoinType {cons("Inner")}
    "LEFT OUTER"  -> JoinType {cons("Left")}
    "RIGHT OUTER" -> JoinType {cons("Right")}
    "FULL OUTER"  -> JoinType {cons("Full")}
    "UNION"       -> JoinType {cons("Union")}


