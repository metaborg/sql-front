module expressions/Primary[E]
imports
  lexical/Literal
  expressions/Case
  expressions/Cast

exports
  sorts AggrFun
  context-free syntax
    UnsignedValSpec -> E
    ColumnRef       -> E
    CaseExpr        -> E 
    CastSpec        -> E

    "(" QueryExpr ")" -> E {cons("Subquery")}
    "(" ValExpr   ")" -> E {bracket}

    "COUNT" "(" "*" ")"                     -> E {cons("CountAll")}
    "count" "(" "*" ")"                     -> E {cons("CountAll")}
    AggrFun "(" SetQuantifier?  ValExpr ")" -> E {cons("Aggr")}

    "AVG"   -> AggrFun {cons("Avg")  }
    "avg"   -> AggrFun {cons("Avg")  }
    "MAX"   -> AggrFun {cons("Max")  }
    "max"   -> AggrFun {cons("Max")  }
    "MIN"   -> AggrFun {cons("Min")  }
    "min"   -> AggrFun {cons("Min")  }
    "SUM"   -> AggrFun {cons("Sum")  }
    "sum"   -> AggrFun {cons("Sum")  }
    "COUNT" -> AggrFun {cons("Count")}
    "count" -> AggrFun {cons("Count")}
