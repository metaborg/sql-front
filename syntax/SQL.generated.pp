[
   CharString                                  -- _1,
   ApproxNum                                   -- _1,
   ExactNum                                    -- _1,
   User                                        -- KW["USER"],
   CurrentUser                                 -- KW["CURRENT_USER"],
   SessionUser                                 -- KW["SESSION_USER"],
   SystemUser                                  -- KW["SYSTEM_USER"],
   Value                                       -- KW["VALUE"],
   DynParam                                    -- KW["?"],
   varSpec                                     -- _1 _2,
   varSpec.2:opt                               -- _1,
   Indicator                                   -- KW["INDICATOR"] _1,
   HostVar                                     -- KW[":"] _1,
   Var                                         -- KW[":"] _1,
   Plus                                        -- KW["+"] _1,
   Minus                                       -- KW["-"] _1,
   Mul                                         -- _1 KW["*"] _2,
   Div                                         -- _1 KW["/"] _2,
   Plus                                        -- _1 KW["+"] _2,
   Min                                         -- _1 KW["-"] _2,
   Case                                        -- KW["CAST"] KW["("] _1 KW["AS"] _2 KW[")"],
   Null                                        -- KW["NULL"],
   NullIf                                      -- KW["NULLIF"] KW["("] _1 KW[","] _2 KW[")"],
   Coalesce                                    -- KW["COALESCE"] KW["("] _1 KW[")"],
   Coalesce.1:iter-sep                         -- _1 KW[","],
   SimpleCase                                  -- KW["CASE"] _1 _2 _3 KW["END"],
   SimpleCase.2:iter                           -- _1,
   SimpleCase.3:opt                            -- _1,
   SearchedCase                                -- KW["CASE"] _1 _2 KW["END"],
   SearchedCase.1:iter                         -- _1,
   SearchedCase.2:opt                          -- _1,
   WhenClause                                  -- KW["WHEN"] _1 KW["THEN"] _2,
   WhenClause                                  -- KW["WHEN"] _1 KW["THEN"] _2,
   ElseClause                                  -- KW["ELSE"] _1,
   Null                                        -- KW["NULL"],
   Subquery                                    -- KW["("] _1 KW[")"],
   CountAll                                    -- KW["COUNT(*)"],
   Aggr                                        -- _1 KW["("] _2 _3 KW[")"],
   Aggr.2:opt                                  -- _1,
   Avg                                         -- KW["AVG"],
   Max                                         -- KW["MAX"],
   Min                                         -- KW["MIN"],
   Sum                                         -- KW["SUM"],
   Count                                       -- KW["COUNT"],
   Concat                                      -- _1 KW["||"] _2,
   Collate                                     -- _1 _2,
   Substring                                   -- KW["SUBSTRING"] KW["("] _1 KW["FROM"] _2 _3 KW[")"],
   Substring.3:opt                             -- _1,
   For                                         -- KW["FOR"] _1,
   Upper                                       -- KW["UPPER"] KW["("] _1 KW[")"],
   Lower                                       -- KW["LOWER"] KW["("] _1 KW[")"],
   Convert                                     -- KW["CONVERT"] KW["("] _1 KW["USING"] _2 KW[")"],
   Translate                                   -- KW["TRANSLATE"] KW["("] _1 KW["USING"] _2 KW[")"],
   Trim                                        -- KW["TRIM"] KW["("] _1 _2 KW[")"],
   Trim.1:opt                                  -- _1,
   TrimOp                                      -- _1 _2 KW["FROM"],
   TrimOp.1:opt                                -- _1,
   TrimOp.2:opt                                -- _1,
   Leading                                     -- KW["LEADING"],
   Trailing                                    -- KW["TRAILING"],
   Both                                        -- KW["BOTH"],
   Substring                                   -- KW["SUBSTRING"] KW["("] _1 KW["FROM"] _2 _3 KW[")"],
   Substring.3:opt                             -- _1,
   Concat                                      -- _1 KW["||"] _2,
   And                                         -- _1 KW["AND"] _2,
   Or                                          -- _1 KW["OR"] _2,
   Not                                         -- KW["NOT"] _1,
   Comparison                                  -- _1 _2 _3,
   Between                                     -- _1 _2 KW["BETWEEN"] _3 KW["AND"] _4,
   Between.2:opt                               -- _1,
   In                                          -- _1 _2 KW["IN"] KW["("] _3 KW[")"],
   In.2:opt                                    -- _1,
   Not                                         -- KW["NOT"],
   Values                                      -- _1,
   Values.1:iter-sep                           -- _1 KW[","],
   Like                                        -- _1 _2 KW["LIKE"] _3 _4,
   Like.2:opt                                  -- _1,
   Like.4:opt                                  -- _1,
   Escape                                      -- KW["ESCAPE"] _1,
   Escape.1:opt                                -- _1,
   IsNull                                      -- KW["IS"] _1 KW["NULL"],
   IsNull.1:opt                                -- _1,
   QuantifiedComparison                        -- _1 _2 _3 KW["("] _4 KW[")"],
   All                                         -- KW["ALL"],
   Any                                         -- KW["ANY"],
   Some                                        -- KW["SOME"],
   Exists                                      -- KW["EXISTS"] KW["("] _1 KW[")"],
   Unique                                      -- KW["UNIQUE"] KW["("] _1 KW[")"],
   Match                                       -- _1 KW["MATCH"] _2 _3 KW["("] _4 KW[")"],
   Match.2:opt                                 -- _1,
   Match.3:opt                                 -- _1,
   Unique                                      -- KW["UNIQUE"],
   Partial                                     -- KW["PARTIAL"],
   Full                                        -- KW["FULL"],
   Overlaps                                    -- _1 KW["OVERLAPS"] _2,
   EqOp                                        -- KW["="],
   LtOp                                        -- KW["<"],
   LtEqOp                                      -- KW["<="],
   GtOp                                        -- KW[">"],
   GtEqOp                                      -- KW[">="],
   LtGtOp                                      -- KW["<>"],
   Null                                        -- KW["NULL"],
   Default                                     -- KW["DEFAULT"],
   Row                                         -- KW["("] _1 KW[")"],
   Row.1:iter-sep                              -- _1 KW[","],
   Subquery                                    -- KW["("] _1 KW[")"],
   Catalog                                     -- _1,
   ColumnName                                  -- _1,
   TableName                                   -- _1,
   RangeVar                                    -- _1,
   Schema                                      -- _1 _2,
   Schema.1:opt                                -- _1,
   Schema.1:opt.1:seq                          -- _1 KW["."],
   BaseTable                                   -- _1 _2,
   BaseTable.1:opt                             -- _1,
   BaseTable.1:opt.1:seq                       -- _1 KW["."],
   ColumnRef                                   -- _1 _2,
   ColumnRef.1:opt                             -- _1,
   ColumnRef.1:opt.1:seq                       -- _1 KW["."],
   AmbQualifier                                -- _1,
   All                                         -- KW["ALL"],
   Distinct                                    -- KW["DISTINCT"],
   Union                                       -- _1 KW["UNION"] _2 _3 _4,
   Union.2:opt                                 -- _1,
   Union.3:opt                                 -- _1,
   Except                                      -- _1 KW["EXCEPT"] _2 _3 _4,
   Except.2:opt                                -- _1,
   Except.3:opt                                -- _1,
   Intersect                                   -- _1 KW["INTERSECT"] _2 _3 _4,
   Intersect.2:opt                             -- _1,
   Intersect.3:opt                             -- _1,
   All                                         -- KW["ALL"],
   Corresponding                               -- KW["CORRESPONDING"] _1,
   Corresponding.1:opt                         -- _1,
   By                                          -- KW["BY"] KW["("] _1 KW[")"],
   By.1:iter-sep                               -- _1 KW[","],
   Values                                      -- V  [H  [KW["VALUES"]] _1],
   Values.1:iter-sep                           -- _1 KW[","],
   Table                                       -- KW["TABLE"] _1,
   Select                                      -- KW["SELECT"] _1 _2 _3,
   Select.1:opt                                -- _1,
   Select.2:iter-sep                           -- _1 KW[","],
   ColumnProject                               -- _1 _2,
   ColumnProject.2:opt                         -- _1,
   ColumnProject.2:opt.1:seq                   -- _1 _2,
   ColumnProject.2:opt.1:seq.1:opt             -- _1,
   WildcardProject                             -- _1 KW["*"],
   WildcardProject.1:opt                       -- _1,
   WildcardProject.1:opt.1:seq                 -- _1 KW["."],
   As                                          -- KW["AS"],
   From                                        -- KW["FROM"] _1 _2 _3 _4,
   From.1:iter-sep                             -- _1 KW[","],
   From.2:opt                                  -- _1,
   From.3:opt                                  -- _1,
   From.4:opt                                  -- _1,
   Collate                                     -- _1 _2,
   Where                                       -- KW["WHERE"] _1,
   GroupBy                                     -- V  [H  [KW["GROUP BY"]] _1],
   GroupBy.1:iter-sep                          -- _1 KW[","],
   Having                                      -- KW["HAVING"] _1,
   TableRef                                    -- _1 _2,
   TableRef.2:opt                              -- _1,
   TableRef.2:opt.1:seq                        -- _1 _2 _3,
   TableRef.2:opt.1:seq.1:opt                  -- _1,
   TableRef.2:opt.1:seq.3:opt                  -- _1,
   TableRef.2:opt.1:seq.3:opt.1:seq            -- KW["("] _1 KW[")"],
   TableRef.2:opt.1:seq.3:opt.1:seq.1:iter-sep -- _1 KW[","],
   TableRef                                    -- KW["("] _1 KW[")"] _2 _3 _4,
   TableRef.2:opt                              -- _1,
   TableRef.4:opt                              -- _1,
   TableRef.4:opt.1:seq                        -- KW["("] _1 KW[")"],
   TableRef.4:opt.1:seq.1:iter-sep             -- _1 KW[","],
   CrossJoin                                   -- _1 KW["CROSS JOIN"] _2,
   NaturalJoin                                 -- _1 KW["NATURAL"] _2 KW["JOIN"] _3,
   NaturalJoin.2:opt                           -- _1,
   Join                                        -- _1 _2 KW["JOIN"] _3 _4,
   Join.2:opt                                  -- _1,
   On                                          -- KW["ON"] _1,
   Using                                       -- KW["USING"] KW["("] _1 KW[")"],
   Using.1:iter-sep                            -- _1 KW[","],
   Inner                                       -- KW["INNER"],
   Left                                        -- KW["LEFT OUTER"],
   Right                                       -- KW["RIGHT OUTER"],
   Full                                        -- KW["FULL OUTER"],
   Union                                       -- KW["UNION"],
   Stm                                         -- _1 KW[";"],
   SelectStm                                   -- _1 _2,
   SelectStm.2:opt                             -- _1,
   OrderBy                                     -- V  [H  [KW["ORDER"] KW["BY"]] _1],
   OrderBy.1:iter-sep                          -- _1 KW[","],
   SortSpec                                    -- _1 _2,
   SortSpec.2:opt                              -- _1,
   Ascending                                   -- KW["ASC"],
   Descending                                  -- KW["DESC"]
]