%%%
 %% @todo Bit string literals
 %% @todo Hex string literals
 %% @todo National character string literal
 %% @todo Datetime literal
 %% @todo Interval literal
 %%%
module lexical/Literal
exports
  sorts Lit
  context-free syntax
    UnsignedNumLit -> UnsignedLit
    GeneralLit     -> UnsignedLit

    CharStringLit     -> GeneralLit {cons("CharString")}  
    NatCharStringLit  -> GeneralLit
    BitStringLit      -> GeneralLit
    HexStringLit      -> GeneralLit
    DateTimeStringLit -> GeneralLit
    IntervalLit       -> GeneralLit

    ApproxNumLit  -> UnsignedNumLit {cons("ApproxNum")}
    ExactNumLit   -> UnsignedNumLit {cons("ExactNum")}

  sorts ExactNumLit ApproxNumLit
  lexical syntax
    [0-9]+ -> NumDigits  
    [0-9]* "." [0-9]* -> NumDigits
           "."        -> NumDigits {reject}
           
    NumDigits -> ExactNumLit

    NumDigits Exponent -> ApproxNumLit    
    [eE] SignedInteger -> Exponent
    [\+\-]? [0-9]+ -> SignedInteger    
    
    [0-9]+ -> UnsignedInteger        

  lexical restrictions
    NumDigits     -/- [0-9]
    SignedInteger -/- [0-9]    
    
  %% @todo Support character set stuff?
  sorts CharStringLit CharRepr
  lexical syntax
    [\'] CharRepr1* [\'] -> CharStringLit
    [\"] CharRepr2* [\"] -> CharStringLit

    [A-Za-z0-9\ \%\&\(\)\*\+\,\-\.\/\:\;\<\=\>\?\_\|] -> CharRepr
    [\\][\\]   -> CharRepr %% double backslash
    
    CharRepr -> CharRepr1
    [\\][\']    -> CharRepr1 %% escaped single quote
    
    CharRepr -> CharRepr2
    [\\][\"]   -> CharRepr2 %% escaped double quote
